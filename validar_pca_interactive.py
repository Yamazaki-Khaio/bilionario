import streamlit as st
import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
import os
import sys

# Importa a fun√ß√£o que queremos testar
from advanced_pca_simplificado import (
    display_interactive_pca_example
)

# Configura√ß√£o b√°sica do Streamlit
st.set_page_config(
    page_title="Valida√ß√£o PCA",
    page_icon="üß™",
    layout="wide"
)

st.title("üß™ Valida√ß√£o da Fun√ß√£o display_interactive_pca_example")

# Cria dados de teste simples
np.random.seed(42)
n_samples = 100
n_features = 5

# Dados sint√©ticos
data = np.random.randn(n_samples, n_features)
selected_assets = ["Asset_" + str(i) for i in range(1, n_features+1)]

# Aplica PCA
pca = PCA(n_components=3)
pca.fit(data)

# Exibe informa√ß√µes sobre os dados de teste
st.subheader("Dados de teste")
st.write(f"N√∫mero de amostras: {n_samples}")
st.write(f"N√∫mero de ativos: {n_features}")
st.write(f"Componentes PCA: 3")

st.subheader("Vari√¢ncia explicada por componente")
explained_variance = pd.DataFrame({
    "Componente": [f"PC{i+1}" for i in range(3)],
    "Vari√¢ncia Explicada": pca.explained_variance_ratio_
})
st.table(explained_variance)

# Linha divis√≥ria
st.markdown("---")

st.subheader("Resultado da fun√ß√£o display_interactive_pca_example:")
try:
    # Tenta executar a fun√ß√£o
    display_interactive_pca_example(pca, selected_assets, 3)
    st.success("‚úÖ A fun√ß√£o foi executada com sucesso!")
except Exception as e:
    st.error(f"‚ùå Erro ao executar a fun√ß√£o: {str(e)}")
    st.code(str(e))
    
    # Exibe o traceback completo
    import traceback
    st.code(traceback.format_exc())
