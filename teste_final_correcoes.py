import streamlit as st
import pandas as pd
import numpy as np
import os
import sys
import importlib
from constants import get_raw_data_path

def test_function_exists(module_name, function_name):
    """Verifica se uma fun√ß√£o existe em um m√≥dulo"""
    try:
        module = importlib.import_module(module_name)
        function = getattr(module, function_name, None)
        if function is None:
            print(f"‚ùå Fun√ß√£o {function_name} n√£o encontrada no m√≥dulo {module_name}")
            return False
        print(f"‚úÖ Fun√ß√£o {function_name} encontrada no m√≥dulo {module_name}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao verificar fun√ß√£o {function_name} no m√≥dulo {module_name}: {str(e)}")
        return False

def test_pair_trading_fixes():
    """Testa corre√ß√µes nos m√≥dulos pair_trading"""
    print("\nüîç Verificando corre√ß√µes no pair_trading_helpers.py...")
    
    # Verificar se o m√≥dulo pode ser importado
    try:
        import pair_trading_helpers
        print("‚úÖ M√≥dulo pair_trading_helpers importado com sucesso")
        
        # Verificar se as fun√ß√µes cr√≠ticas existem
        test_function_exists("pair_trading_helpers", "_select_assets_for_analysis")
        test_function_exists("pair_trading_helpers", "backtest_tab")
        test_function_exists("pair_trading_helpers", "_execute_backtest_analysis")
        
    except Exception as e:
        print(f"‚ùå Erro ao importar pair_trading_helpers: {str(e)}")
        return False
    
    return True

def test_statistical_analysis_fixes():
    """Testa corre√ß√µes nos m√≥dulos statistical_analysis"""
    print("\nüîç Verificando corre√ß√µes no statistical_analysis_helpers.py...")
    
    # Verificar se o m√≥dulo pode ser importado
    try:
        import statistical_analysis_helpers
        print("‚úÖ M√≥dulo statistical_analysis_helpers importado com sucesso")
        
        # Verificar se a fun√ß√£o plot_scatter_chart existe
        test_function_exists("statistical_analysis_helpers", "plot_scatter_chart")
        
        # Testar a fun√ß√£o plot_scatter_chart (superficialmente)
        try:
            # Criar dados de teste
            data1 = np.random.randn(100)
            data2 = np.random.randn(100)
            
            # Desativar sa√≠da do streamlit durante o teste
            import io
            old_stdout = sys.stdout
            new_stdout = io.StringIO()
            sys.stdout = new_stdout
            
            # Chamar a fun√ß√£o (sem renderizar)
            statistical_analysis_helpers.plot_scatter_chart(
                data1=data1, 
                data2=data2, 
                name1="Teste1", 
                name2="Teste2", 
                add_regression=True
            )
            
            # Restaurar stdout
            sys.stdout = old_stdout
            print("‚úÖ Fun√ß√£o plot_scatter_chart executada sem erros")
            
        except Exception as e:
            print(f"‚ùå Erro ao executar plot_scatter_chart: {str(e)}")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro ao importar statistical_analysis_helpers: {str(e)}")
        return False
    
    return True

def test_pca_fixes():
    """Testa corre√ß√µes nos m√≥dulos pca"""
    print("\nüîç Verificando corre√ß√µes no advanced_pca_helpers.py...")
    
    # Verificar se o m√≥dulo pode ser importado
    try:
        import advanced_pca_helpers
        print("‚úÖ M√≥dulo advanced_pca_helpers importado com sucesso")
        
    except Exception as e:
        print(f"‚ùå Erro ao importar advanced_pca_helpers: {str(e)}")
        return False
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üîß Iniciando valida√ß√£o das corre√ß√µes...")
    
    # Testar corre√ß√µes de pair_trading
    pair_trading_ok = test_pair_trading_fixes()
    
    # Testar corre√ß√µes de statistical_analysis
    stat_analysis_ok = test_statistical_analysis_fixes()
    
    # Testar corre√ß√µes de pca
    pca_ok = test_pca_fixes()
    
    # Resultado final
    if pair_trading_ok and stat_analysis_ok and pca_ok:
        print("\nüéâ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO! Todas as corre√ß√µes foram aplicadas corretamente.")
    else:
        print("\n‚ö†Ô∏è VALIDA√á√ÉO CONCLU√çDA COM PROBLEMAS! Algumas corre√ß√µes precisam ser revisadas.")

if __name__ == "__main__":
    main()
