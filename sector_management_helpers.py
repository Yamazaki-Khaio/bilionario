"""
M√≥dulo auxiliar para gest√£o por setor
Reduz complexidade cognitiva extraindo funcionalidades em fun√ß√µes menores
"""

import pandas as pd
import numpy as np
import plotly.express as px
import streamlit as st
import json
import io
from datetime import datetime
from portfolio_allocation import PortfolioAllocationManager
from data_fetch import ASSET_CATEGORIES
from financial_formatting import format_percentage, format_currency
from constants import MATERIALS_SECTOR, TELECOMMUNICATIONS_SECTOR, TECHNOLOGY_SECTOR


def get_risk_profile_config(risk_tolerance):
    """Retorna configura√ß√£o de perfil de risco e sugest√µes de aloca√ß√£o"""
    if risk_tolerance <= 3:  # Conservador
        return {
            'suggested_allocation': {
                'financeiro': 30, 'energia': 20, 'consumo': 15, 
                MATERIALS_SECTOR: 10, TELECOMMUNICATIONS_SECTOR: 10, TECHNOLOGY_SECTOR: 15
            },
            'profile': "Conservador",
            'color': "green"
        }
    elif risk_tolerance <= 7:  # Moderado
        return {
            'suggested_allocation': {
                'financeiro': 25, 'energia': 15, 'consumo': 20, 
                MATERIALS_SECTOR: 15, TELECOMMUNICATIONS_SECTOR: 10, TECHNOLOGY_SECTOR: 15
            },
            'profile': "Moderado",
            'color': "orange"
        }
    else:  # Agressivo
        return {
            'suggested_allocation': {
                'financeiro': 20, 'energia': 10, 'consumo': 15, 
                MATERIALS_SECTOR: 20, TELECOMMUNICATIONS_SECTOR: 15, TECHNOLOGY_SECTOR: 20
            },
            'profile': "Agressivo",
            'color': "red"
        }


def display_risk_profile(profile_color, risk_profile):
    """Exibe o perfil de risco com cor apropriada"""
    message = f"üìä **Perfil de Risco**: {risk_profile} | **Sugest√£o**: Baseada em sua toler√¢ncia ao risco"
    
    if profile_color == "green":
        st.success(message)
    elif profile_color == "orange":
        st.warning(message)
    else:
        st.error(message)


def configure_sector_allocation(available_sectors, suggested_allocation):
    """Configura aloca√ß√£o manual por setor"""
    sector_allocations = {}
    total_allocation = 0
    
    use_suggestion = st.checkbox("üéØ Usar Aloca√ß√£o Sugerida", value=True)
    
    for sector in available_sectors:
        if use_suggestion and sector in suggested_allocation:
            default_value = suggested_allocation[sector]
        else:
            default_value = 100 // len(available_sectors)
            
        allocation = st.slider(
            f"{sector.title()} (%)",
            min_value=0,
            max_value=100,
            value=default_value,
            key=f"allocation_{sector}"
        )
        sector_allocations[sector] = allocation
        total_allocation += allocation
    
    return sector_allocations, total_allocation


def display_allocation_status(total_allocation, total_capital, sector_allocations):
    """Exibe status da aloca√ß√£o e valores por setor"""
    if total_allocation == 100:
        st.success("‚úÖ Aloca√ß√£o Balanceada!")
    elif total_allocation < 100:
        st.warning(f"‚ö†Ô∏è Faltam {100-total_allocation}%")
    else:
        st.error(f"‚ùå Excesso de {total_allocation-100}%")
    
    st.metric("Total Alocado", f"{total_allocation}%")
    
    # Mostrar valor por setor
    st.markdown("**Valores por Setor:**")
    for sector, pct in sector_allocations.items():
        value = total_capital * (pct / 100)
        if pct > 0:
            st.write(f"‚Ä¢ {sector.title()}: R$ {value:,.0f}")


def create_allocation_visualizations(sector_allocations, available_sectors, suggested_allocation):
    """Cria visualiza√ß√µes da aloca√ß√£o"""
    tab1, tab2, tab3 = st.tabs(["ü•ß Pizza", "üìä Barras", "üéØ Compara√ß√£o"])
    
    # Filtrar setores com aloca√ß√£o > 0
    active_sectors = {k: v for k, v in sector_allocations.items() if v > 0}
    
    with tab1:
        if active_sectors:
            fig_pie = px.pie(
                values=list(active_sectors.values()),
                names=[s.title() for s in active_sectors.keys()],
                title='Distribui√ß√£o por Setor',
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            st.plotly_chart(fig_pie, use_container_width=True)
    
    with tab2:
        if active_sectors:
            fig_bar = px.bar(
                x=list(active_sectors.values()),
                y=[s.title() for s in active_sectors.keys()],
                title='Aloca√ß√£o por Setor (%)',
                orientation='h',
                color=list(active_sectors.values()),
                color_continuous_scale="viridis"
            )
            st.plotly_chart(fig_bar, use_container_width=True)
    
    with tab3:
        # Comparar com aloca√ß√£o sugerida
        comparison_df = pd.DataFrame({
            'Setor': [s.title() for s in available_sectors],
            'Sua Aloca√ß√£o (%)': [sector_allocations.get(s, 0) for s in available_sectors],
            'Sugerida (%)': [suggested_allocation.get(s, 0) for s in available_sectors]
        })
        
        fig_comparison = px.bar(
            comparison_df,
            x='Setor',
            y=['Sua Aloca√ß√£o (%)', 'Sugerida (%)'],
            title='Compara√ß√£o: Sua Aloca√ß√£o vs Sugerida',
            barmode='group'
        )
        st.plotly_chart(fig_comparison, use_container_width=True)


def analyze_sector_performance(df, returns, sector_allocations):
    """Executa an√°lise de performance por setor"""
    try:
        # Inicializar gestor de aloca√ß√£o
        allocation_manager = PortfolioAllocationManager(df, returns)
        
        # Configurar aloca√ß√£o por setor
        sector_budgets = {sector: pct/100 for sector, pct in sector_allocations.items() if pct > 0}
        allocation_manager.set_sector_allocation(sector_budgets)
        
        # Selecionar ativos por setor
        selected_assets = []
        for sector in sector_budgets.keys():
            if sector in ASSET_CATEGORIES:
                sector_assets = [asset for asset in ASSET_CATEGORIES[sector] if asset in df.columns]
                selected_assets.extend(sector_assets[:3])  # Top 3 por setor
        
        if len(selected_assets) >= 3:
            # Calcular pesos do portfolio
            allocation_method = st.selectbox(
                "M√©todo de Aloca√ß√£o:",
                ["equal_weight", "market_cap", "risk_parity"]
            )
            
            portfolio_weights = allocation_manager.calculate_portfolio_weights(
                selected_assets, allocation_method
            )
            
            return allocation_manager, selected_assets, portfolio_weights
        else:
            st.warning("‚ö†Ô∏è N√£o h√° ativos suficientes nos setores selecionados para an√°lise")
            return None, None, None
            
    except Exception as e:
        st.error(f"‚ùå Erro na an√°lise de aloca√ß√£o: {str(e)}")
        return None, None, None


def display_performance_results(allocation_manager, selected_assets, portfolio_weights):
    """Exibe resultados da an√°lise de performance"""
    # Mostrar aloca√ß√£o
    st.subheader("üìä Visualiza√ß√£o da Aloca√ß√£o Calculada")
    
    # Gr√°fico de pizza da aloca√ß√£o
    fig_allocation = allocation_manager.plot_sector_allocation()
    if fig_allocation:
        st.plotly_chart(fig_allocation, use_container_width=True, key="sector_allocation_chart")
    
    # Calcular performance por setor
    sector_performance = allocation_manager.calculate_sector_performance(
        selected_assets, portfolio_weights
    )
    
    if sector_performance:
        # Compara√ß√£o de performance
        fig_comparison = allocation_manager.plot_sector_performance_comparison(sector_performance)
        if fig_comparison:
            st.plotly_chart(fig_comparison, use_container_width=True, key="sector_performance_comparison")
        
        # Tabela de performance
        st.subheader("üìã Performance Detalhada por Setor")
        performance_df = pd.DataFrame(sector_performance).T
        performance_df = performance_df.round(4)
        st.dataframe(performance_df, use_container_width=True)
        
        # Insights autom√°ticos
        best_sector = performance_df['annual_return'].idxmax()
        worst_sector = performance_df['annual_return'].idxmin()
        
        col1, col2 = st.columns(2)
        with col1:
            st.success(f"üéØ **Melhor Setor**: {best_sector}")
            st.write(f"Retorno: {format_percentage(performance_df.loc[best_sector, 'annual_return'])}")
        with col2:
            st.warning(f"‚ö†Ô∏è **Setor Desafiador**: {worst_sector}")
            st.write(f"Retorno: {format_percentage(performance_df.loc[worst_sector, 'annual_return'])}")


def generate_recommendations(risk_tolerance, sector_allocations, rebalance_frequency):
    """Gera recomenda√ß√µes personalizadas"""
    recommendations = []
    
    # Baseado no perfil de risco
    if risk_tolerance <= 3:
        recommendations.append("üõ°Ô∏è **Conservador**: Considere aumentar aloca√ß√£o em setores defensivos (energia, financeiro)")
        recommendations.append("üìä Mantenha diversifica√ß√£o para reduzir volatilidade")
    elif risk_tolerance <= 7:
        recommendations.append("‚öñÔ∏è **Moderado**: Balance entre crescimento e estabilidade")
        recommendations.append("üîÑ Rebalanceie trimestralmente para manter aloca√ß√£o alvo")
    else:
        recommendations.append("üöÄ **Agressivo**: Foque em setores de crescimento (tecnologia, materiais)")
        recommendations.append("üìà Aceite maior volatilidade para potencial maior retorno")
    
    # Baseado na aloca√ß√£o atual
    max_allocation = max(sector_allocations.values()) if sector_allocations.values() else 0
    if max_allocation > 40:
        recommendations.append("‚ö†Ô∏è **Concentra√ß√£o Alta**: Considere diversificar mais entre setores")
    
    if len([v for v in sector_allocations.values() if v > 0]) < 3:
        recommendations.append("üéØ **Diversifica√ß√£o**: Inclua pelo menos 3-4 setores diferentes")
    
    recommendations.append(f"üìÖ **Rebalanceamento**: Revise sua aloca√ß√£o {rebalance_frequency.lower()}")
    recommendations.append("üìä **Monitoramento**: Acompanhe performance relativa entre setores")
    
    return recommendations


def save_configuration(sector_allocations, total_capital, risk_tolerance, rebalance_frequency):
    """Salva configura√ß√£o em arquivo JSON"""
    config = {
        'sector_allocations': sector_allocations,
        'total_capital': total_capital,
        'risk_tolerance': risk_tolerance,
        'rebalance_frequency': rebalance_frequency,
        'timestamp': datetime.now().isoformat()
    }
    with open('sector_allocation_config.json', 'w') as f:
        json.dump(config, f, indent=2)
    
    st.success("‚úÖ Configura√ß√£o salva!")


def export_to_excel(total_allocation, sector_allocations, total_capital, risk_profile, rebalance_frequency):
    """Exporta aloca√ß√£o para arquivo Excel"""
    if total_allocation == 100:
        allocation_data = pd.DataFrame([
            {
                'Setor': sector.title(),
                'Aloca√ß√£o (%)': pct,
                'Valor (R$)': total_capital * (pct / 100),
                'Perfil_Risco': risk_profile,
                'Data_Criacao': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            for sector, pct in sector_allocations.items() if pct > 0
        ])
        
        # Criar arquivo Excel para download
        excel_buffer = io.BytesIO()
        
        with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
            allocation_data.to_excel(writer, sheet_name='Aloca√ß√£o Setorial', index=False)
            
            # Adicionar resumo
            summary_data = pd.DataFrame([{
                'Total_Capital': total_capital,
                'Perfil_Risco': risk_profile,
                'Frequencia_Rebalanceamento': rebalance_frequency,
                'Setores_Alocados': len([pct for pct in sector_allocations.values() if pct > 0]),
                'Concentracao_Maxima': max(sector_allocations.values()) if sector_allocations.values() else 0
            }])
            summary_data.to_excel(writer, sheet_name='Resumo', index=False)
        
        excel_buffer.seek(0)
        
        st.download_button(
            label="üìä Download Aloca√ß√£o Setorial",
            data=excel_buffer.getvalue(),
            file_name=f"alocacao_setorial_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        
        st.success("‚úÖ Arquivo Excel preparado para download!")
    else:
        st.warning("‚ö†Ô∏è Complete a aloca√ß√£o (100%) antes de exportar")
